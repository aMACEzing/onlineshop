// Voyga

"use strict";

const emojis = require("emojilib");
const ansi = require("ansi-styles");

// Patterns of perfume string

const colorPattern = /\(.*\)(:[a-z]+)+/ig;
const emojiPattern = /\(:\w*:\)/ig;

/**
 *
 * Stylize a string
 *
 * @private
 *
 * @param {String} the string that want to be stylized
 * @param {String} the style of the string
 * @return {String} returns a styled string
 *
 */

function decorate(string, style) {

	let result = string;

	if (ansi[style]) {

		result = ansi[style].open + string + ansi[style].close;

	}

	return result;

}

/**
 *
 * Parse emojis in a perfume string
 *
 * @private
 *
 * @param {String} the string that is expected to be parsed
 * @return {String} returns a string containing emojis
 *
 */

function parseEmoji(thing) {

	const result = typeof thing === "string" ? thing.replace(emojiPattern, (match) => {

		const name = match.substring(2, match.length - 2);

		return emojis[name] !== undefined ? emojis[name].char : "";

	}) : thing;

	return result;

}

/**
 *
 * Parse styles in a perfume string
 *
 * @private
 *
 * @param {String} the string that is expected to be parsed
 * @param {String} the style of the whole string
 * @return {String} returns a styled string
 *
 */

function parseColor(thing, globalStyles) {

	let result = typeof thing === "string" ? thing.replace(colorPattern, (match) => {

		const sep = /\):/.exec(match).index;
		const styles = match.substring(sep + 2, match.length).split(":");
		let str = match.substring(1, sep);

		styles.forEach((i) => str = decorate(str, i.toLowerCase()));

		return str;

	}) : thing;

	globalStyles = Array.isArray(globalStyles) ? globalStyles : Array(globalStyles);
	globalStyles.forEach((i) => result = decorate(result, i));

	return result;

}

/**
 *
 * Parse a perfume string
 *
 * @param {String} the string that is expected to be parsed
 * @param {String} the style of the whole string
 * @return {String} returns a styled string
 *
 */

function perfume(thing, globalStyles) {

	return parseColor(parseEmoji(thing), globalStyles);

}

// Expose `perfume`

module.exports = perfume;
